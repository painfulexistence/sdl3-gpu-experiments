#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(set = 2, binding = 0) uniform CameraInfo {
    mat4 view;
    mat4 proj;
};

struct Instance {
    mat4 model;
    uint meshID;
    uint materialID;
};

layout(std430, set = 0, binding = 0) readonly buffer InstanceBuffer {
    Instance instances[];
};

layout(std430, set = 1, binding = 0) buffer VisibilityBuffer {
    uint visibleIndices[];
};

layout(std430, set = 1, binding = 1) coherent buffer CounterBuffer {
    uint visibleCount;
};

bool isVisible(Instance instance) {
    // vec4 center = instance.model * vec4(0.0, 0.0, 0.0, 1.0);
    // float radius = instance.radius;

    // for (int i = 0; i < 6; ++i) {
    //     vec4 plane = frustumPlanes[i];
    //     if (dot(plane.xyz, center.xyz) + plane.w < -radius)
    //         return false;
    // }
    return true;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= instances.length()) return;

    if (isVisible(instances[id])) {
        uint index = atomicAdd(visibleCount, 1);
        visibleIndices[index] = id;
    }
}