#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 1, binding = 0, rgba8) uniform writeonly image2D outImage;
layout(std140, set = 2, binding = 0) uniform UBO {
    vec2 resolution;
    vec2 mousePosition;
    float time;
    float deltaTime;
};

const float kAnimationFrequency = 0.01;
const float kAnimationSpeed = 4.0;
const float kAnimationScaleLow = 0.62;
const float kAnimationScale = 0.38;
const vec2 kMandelbrotPixelOffset = vec2(-0.2, -0.35);
const vec2 kMandelbrotOrigin = vec2(-1.2, -0.32);
const vec2 kMandelbrotScale = vec2(2.2, 2.0);

vec3 palette(float t) {
    // Palette 1
    // vec3 a = vec3(0.80, 0.15, 0.56);
    // vec3 b = vec3(0.61, 0.30, 0.12);
    // vec3 c = vec3(0.64, 0.10, 0.59);
    // vec3 d = vec3(0.38, 0.86, 0.47);
    // Palette 2
    // vec3 a = vec3(0.288, 0.303, 0.466);
    // vec3 b = vec3(0.806, 0.664, 0.998);
    // vec3 c = vec3(1.253, 0.992, 1.569);
    // vec3 d = vec3(3.379, 3.574, 3.026);
    // Palette 3
    // vec3 a = vec3(0.420, 0.696, 0.625);
    // vec3 b = vec3(0.791, 0.182, 0.271);
    // vec3 c = vec3(0.368, 0.650, 0.103);
    // vec3 d = vec3(0.913, 3.624, 0.320);
    // Palette 4
    // vec3 a = vec3(0.427, 0.346, 0.372);
    // vec3 b = vec3(0.288, 0.918, 0.336);
    // vec3 c = vec3(0.635, 1.136, 0.404);
    // vec3 d = vec3(1.893, 0.663, 1.910);
    // Palette 5
    vec3 a = vec3(0.746, 0.815, 0.846);
    vec3 b = vec3(0.195, 0.283, 0.187);
    vec3 c = vec3(1.093, 1.417, 1.405);
    vec3 d = vec3(5.435, 2.400, 5.741);
    return a + b * cos(6.28318 * (c * t + d));
}

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outImage);

    if (coord.x >= size.x || coord.y >= size.y) {
        return;
    }

    // Map time to zoom value in [kAnimationScaleLow, 1]
    float zoom = kAnimationScaleLow + kAnimationScale * cos(kAnimationFrequency * time);
    // Speed up zooming
    zoom = pow(zoom, kAnimationSpeed);

    // Scale
    float x0 = zoom * kMandelbrotScale.x * (float(coord.x) / float(size.x) + kMandelbrotPixelOffset.x) + kMandelbrotOrigin.x;
    float y0 = zoom * kMandelbrotScale.y * (float(coord.y) / float(size.y) + kMandelbrotPixelOffset.y) + kMandelbrotOrigin.y;

    // Implement Mandelbrot set
    float x = 0.0;
    float y = 0.0;
    uint iteration = 0;
    const uint max_iteration = 1000;
    float xtmp = 0.0;

    while (x * x + y * y <= 4.0 && iteration < max_iteration) {
        xtmp = x * x - y * y + x0;
        y = 2.0 * x * y + y0;
        x = xtmp;
        iteration += 1;
    }

    vec3 color = palette(0.5 + 0.5 * cos(3.0 + float(iteration) * 0.15));

    imageStore(outImage, coord, vec4(color, 1.0));
}