#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Instance {
    mat4 model;
    uint meshID;
    uint materialID;
};

struct DrawCommand {
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout(std430, set = 0, binding = 0) readonly buffer InstanceBuffer {
    Instance instances[];
};

layout(std430, set = 0, binding = 1) readonly buffer VisibilityBuffer {
    uint visibleIndices[];
};

layout(std430, set = 0, binding = 2) coherent buffer CounterBuffer {
    uint visibleCount;
};

layout(std430, set = 1, binding = 0) buffer CommandBuffer {
    DrawCommand commands[];
};

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= visibleCount) return;

    uint id = visibleIndices[idx];
    uint meshID = instances[id].meshID;
    // uint materialID = instances[id].materialID;
    // uint commandIndex = meshID * 100 + materialID; // You can't do this
    uint commandIndex = meshID;
    atomicAdd(commands[commandIndex].instanceCount, 1);
    // TODO:  ensure this is correct
    for (uint i = meshID + 1; i < commands.length(); i++) {
        atomicAdd(commands[i].baseInstance, 1);
    }
}